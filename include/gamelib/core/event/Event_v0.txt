#pragma once

#include "connection/ClientSession.h"
#include <memory>

// ***************************************************************************/

class IEvent {
public:
	using Ptr = std::shared_ptr<IEvent>;
	virtual ~IEvent() = default;
};

template <typename Derived>
class BaseEvent : public IEvent {
public:
	using Ptr = std::shared_ptr<Derived>;
	static Ptr create() {
		return std::make_shared<Derived>();
	}

protected:
	BaseEvent() {}
	virtual ~BaseEvent() = default;

public:
	const ClientSession::Ptr sender_;
};

template<typename Derived>
concept IsEvent = std::derived_from<Derived, BaseEvent<Derived>>;

